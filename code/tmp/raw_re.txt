rule 0: pattern:"/*" , action:['comment();', 'printf("MULTI_LINE_COMMENT");']
rule 1: pattern:"//"[^\n]* , action:['printf("SINGLE_LINE_COMMENT");']
rule 2: pattern:"auto" , action:['printf("AUTO");']
rule 3: pattern:"_Bool" , action:['printf("BOOL");']
rule 4: pattern:"break" , action:['printf("BREAK");']
rule 5: pattern:"case" , action:['printf("CASE");']
rule 6: pattern:"char" , action:['printf("CHAR");']
rule 7: pattern:"_Complex" , action:['printf("COMPLEX");']
rule 8: pattern:"const" , action:['printf("CONST");']
rule 9: pattern:"continue" , action:['printf("CONTINUE");']
rule 10: pattern:"default" , action:['printf("DEFAULT");']
rule 11: pattern:"do" , action:['printf("DO");']
rule 12: pattern:"double" , action:['printf("DOUBLE");']
rule 13: pattern:"else" , action:['printf("ELSE");']
rule 14: pattern:"enum" , action:['printf("ENUM");']
rule 15: pattern:"extern" , action:['printf("EXTERN");']
rule 16: pattern:"float" , action:['printf("FLOAT");']
rule 17: pattern:"for" , action:['printf("FOR");']
rule 18: pattern:"goto" , action:['printf("GOTO");']
rule 19: pattern:"if" , action:['printf("IF");']
rule 20: pattern:"_Imaginary" , action:['printf("IMAGINARY");']
rule 21: pattern:"inline" , action:['printf("INLINE");']
rule 22: pattern:"int" , action:['printf("INT");']
rule 23: pattern:"long" , action:['printf("LONG");']
rule 24: pattern:"register" , action:['printf("REGISTER");']
rule 25: pattern:"restrict" , action:['printf("RESTRICT");']
rule 26: pattern:"return" , action:['printf("RETURN");']
rule 27: pattern:"short" , action:['printf("SHORT");']
rule 28: pattern:"signed" , action:['printf("SIGNED");']
rule 29: pattern:"sizeof" , action:['printf("SIZEOF");']
rule 30: pattern:"static" , action:['printf("STATIC");']
rule 31: pattern:"struct" , action:['printf("STRUCT");']
rule 32: pattern:"switch" , action:['printf("SWITCH");']
rule 33: pattern:"typedef" , action:['printf("TYPEDEF");']
rule 34: pattern:"union" , action:['printf("UNION");']
rule 35: pattern:"unsigned" , action:['printf("UNSIGNED");']
rule 36: pattern:"void" , action:['printf("VOID");']
rule 37: pattern:"volatile" , action:['printf("VOLATILE");']
rule 38: pattern:"while" , action:['printf("WHILE");']
rule 39: pattern:{L}({L}|{D})* , action:['printf("IDENTIFIER");']
rule 40: pattern:0[xX]{H}+{IS}? , action:['printf("CONSTANT");']
rule 41: pattern:0[0-7]*{IS}? , action:['printf("CONSTANT");']
rule 42: pattern:[1-9]{D}*{IS}? , action:['printf("CONSTANT");']
rule 43: pattern:L?'(\\.|[^\\'\n])+' , action:['printf("CONSTANT");']
rule 44: pattern:{D}+{E}{FS}? , action:['printf("CONSTANT");']
rule 45: pattern:{D}*"."{D}+{E}?{FS}? , action:['printf("CONSTANT");']
rule 46: pattern:{D}+"."{D}*{E}?{FS}? , action:['printf("CONSTANT");']
rule 47: pattern:0[xX]{H}+{P}{FS}? , action:['printf("CONSTANT");']
rule 48: pattern:0[xX]{H}*"."{H}+{P}{FS}? , action:['printf("CONSTANT");']
rule 49: pattern:0[xX]{H}+"."{H}*{P}{FS}? , action:['printf("CONSTANT");']
rule 50: pattern:L?\"(\\.|[^\\"\n])*\" , action:['printf("STRING_LITERAL");']
rule 51: pattern:"..." , action:['printf("ELLIPSIS");']
rule 52: pattern:">>=" , action:['printf("RIGHT_ASSIGN");']
rule 53: pattern:"<<=" , action:['printf("LEFT_ASSIGN");']
rule 54: pattern:"+=" , action:['printf("ADD_ASSIGN");']
rule 55: pattern:"-=" , action:['printf("SUB_ASSIGN");']
rule 56: pattern:"*=" , action:['printf("MUL_ASSIGN");']
rule 57: pattern:"/=" , action:['printf("DIV_ASSIGN");']
rule 58: pattern:"%=" , action:['printf("MOD_ASSIGN");']
rule 59: pattern:"&=" , action:['printf("AND_ASSIGN");']
rule 60: pattern:"^=" , action:['printf("XOR_ASSIGN");']
rule 61: pattern:"|=" , action:['printf("OR_ASSIGN");']
rule 62: pattern:">>" , action:['printf("RIGHT_OP");']
rule 63: pattern:"<<" , action:['printf("LEFT_OP");']
rule 64: pattern:"++" , action:['printf("INC_OP");']
rule 65: pattern:"--" , action:['printf("DEC_OP");']
rule 66: pattern:"->" , action:['printf("PTR_OP");']
rule 67: pattern:"&&" , action:['printf("AND_OP");']
rule 68: pattern:"||" , action:['printf("OR_OP");']
rule 69: pattern:"<=" , action:['printf("LE_OP");']
rule 70: pattern:">=" , action:['printf("GE_OP");']
rule 71: pattern:"==" , action:['printf("EQ_OP");']
rule 72: pattern:"!=" , action:['printf("NE_OP");']
rule 73: pattern:";" , action:['printf(";");']
rule 74: pattern:("{"|"<%") , action:['printf("{");']
rule 75: pattern:("}"|"%>") , action:['printf("}");']
rule 76: pattern:"," , action:['printf(",");']
rule 77: pattern:":" , action:['printf(":");']
rule 78: pattern:"=" , action:['printf("=");']
rule 79: pattern:"(" , action:['printf("(");']
rule 80: pattern:")" , action:['printf(")");']
rule 81: pattern:("["|"<:") , action:['printf("[");']
rule 82: pattern:("]"|":>") , action:['printf("]");']
rule 83: pattern:"." , action:['printf(".");']
rule 84: pattern:"&" , action:['printf("&");']
rule 85: pattern:"!" , action:['printf("!");']
rule 86: pattern:"~" , action:['printf("~");']
rule 87: pattern:"-" , action:['printf("-");']
rule 88: pattern:"+" , action:['printf("+");']
rule 89: pattern:"*" , action:['printf("*");']
rule 90: pattern:"/" , action:['printf("/");']
rule 91: pattern:"%" , action:['printf("%");']
rule 92: pattern:"<" , action:['printf("<");']
rule 93: pattern:">" , action:['printf(">");']
rule 94: pattern:"^" , action:['printf("^");']
rule 95: pattern:"|" , action:['printf("||");']
rule 96: pattern:"?" , action:['printf("?");']
rule 97: pattern:[ \t\v\n\f] , action:['printf("SPACE");']
rule 98: pattern:. , action:['printf("ERROR!");']
